package com.laz.tirphycraft.world.biomes.froz.caveDecorator;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import com.laz.tirphycraft.init.BlockInit;
import com.laz.tirphycraft.util.Reference;
import com.laz.tirphycraft.util.StructureUtil;
import com.laz.tirphycraft.util.interfaces.IStructure;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.Rotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.IChunkGenerator;
import net.minecraft.world.gen.feature.WorldGenerator;
import net.minecraft.world.gen.structure.template.Template;
import net.minecraft.world.gen.structure.template.TemplateManager;
import net.minecraftforge.fml.common.IWorldGenerator;

public class GenFrozCaveStructure extends WorldGenerator implements IStructure  {
	public String structureName;
	StructureUtil util = new StructureUtil();

	public GenFrozCaveStructure(String name) {
		this.structureName = name;
	}

	private boolean checkForSawn(Template template, World world, BlockPos pos) {
		for (int x = 0; x < template.getSize().getX(); x++) {
			for (int z = 0; z < template.getSize().getZ(); z++) {
				if (world.getBlockState(pos.add(x, -1, z)).isFullBlock()
						&& world.getBlockState(pos.add(x, 0, z)) != Blocks.AIR.getDefaultState()
						&& world.getBlockState(pos.add(x, 1, z)) != Blocks.AIR.getDefaultState()) {
					return false;

				}
			}
		}

		return true;
	}

	public void generateStructure(World world, BlockPos pos, Random rand) {
		MinecraftServer mcServer = world.getMinecraftServer();
		TemplateManager manager = worldServer.getStructureTemplateManager();
		ResourceLocation location = new ResourceLocation(Reference.MOD_ID, "froz/underground/" + structureName);
		Template template = manager.get(mcServer, location);

		boolean canPlace = checkForSawn(template, world, pos);

		if (canPlace) {
			IBlockState state = world.getBlockState(pos);
			world.notifyBlockUpdate(pos, state, state, 3);
			util.placeGood(location, world, settings, pos, rand, mcServer, manager);

		}
	}

	@Override
	public boolean generate(World worldIn, Random rand, BlockPos position) {
		generateStructure(worldIn, position, rand);
		return true;
	}
}