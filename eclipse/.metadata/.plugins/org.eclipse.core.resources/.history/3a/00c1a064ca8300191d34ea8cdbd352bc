package com.laz.tirphycraft.entity.ai;

import java.util.List;

import javax.annotation.Nullable;

import com.google.common.base.Predicate;
import com.laz.tirphycraft.entity.boss.EntityPrimaryAttack;

import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.ai.EntityAIBase;
import net.minecraft.entity.ai.EntityLookHelper;
import net.minecraft.pathfinding.PathNavigate;
import net.minecraft.pathfinding.PathNavigateFlying;
import net.minecraft.pathfinding.PathNavigateGround;
import net.minecraft.pathfinding.PathNodeType;

public class entityAiFollowBoss extends EntityAIBase {
	private final EntityPrimaryAttack entity;
	private final Predicate<EntityPrimaryAttack> followPredicate;
	private EntityLiving followingEntity;
	private final double speedModifier;
	private final PathNavigate navigation;
	private int timeToRecalcPath;
	private final float stopDistance;
	private float oldWaterCost;
	private final float areaSize;

	public entityAiFollowBoss(Class<EntityPrimaryAttack> class1, double p_i47417_2_, float p_i47417_4_,
			float p_i47417_5_) {
		this.entity = class1;
		this.followPredicate = new Predicate<EntityPrimaryAttack>() {
			public boolean apply(@Nullable EntityPrimaryAttack p_apply_1_) {
				return p_apply_1_ != null && class1.getClass() != p_apply_1_.getClass();
			}
		};
		this.speedModifier = p_i47417_2_;
		this.navigation = class1.getNavigator();
		this.stopDistance = p_i47417_4_;
		this.areaSize = p_i47417_5_;
		this.setMutexBits(3);

		if (!(class1.getNavigator() instanceof PathNavigateGround)
				&& !(class1.getNavigator() instanceof PathNavigateFlying)) {
			throw new IllegalArgumentException("Unsupported mob type for FollowMobGoal");
		}
	}

	/**
	 * Returns whether the EntityAIBase should begin execution.
	 */
	public boolean shouldExecute() {
		List<EntityPrimaryAttack> list = this.entity.world.<EntityPrimaryAttack>getEntitiesWithinAABB(EntityPrimaryAttack.class,
				this.entity.getEntityBoundingBox().grow((double) this.areaSize), this.followPredicate);

		if (!list.isEmpty()) {
			for (EntityPrimaryAttack EntityPrimaryAttack : list) {
				if (!EntityPrimaryAttack.isInvisible()) {
					this.followingEntity = EntityPrimaryAttack;
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Returns whether an in-progress EntityAIBase should continue executing
	 */
	public boolean shouldContinueExecuting() {
		return this.followingEntity != null && !this.navigation.noPath()
				&& this.entity.getDistanceSq(this.followingEntity) > (double) (this.stopDistance * this.stopDistance);
	}

	/**
	 * Execute a one shot task or start executing a continuous task
	 */
	public void startExecuting() {
		this.timeToRecalcPath = 0;
		this.oldWaterCost = this.entity.getPathPriority(PathNodeType.WATER);
		this.entity.setPathPriority(PathNodeType.WATER, 0.0F);
	}

	/**
	 * Reset the task's internal state. Called when this task is interrupted by
	 * another one
	 */
	public void resetTask() {
		this.followingEntity = null;
		this.navigation.clearPath();
		this.entity.setPathPriority(PathNodeType.WATER, this.oldWaterCost);
	}

	/**
	 * Keep ticking a continuous task that has already been started
	 */
	public void updateTask() {
		if (this.followingEntity != null && !this.entity.getLeashed()) {
			this.entity.getLookHelper().setLookPositionWithEntity(this.followingEntity, 10.0F,
					(float) this.entity.getVerticalFaceSpeed());

			if (--this.timeToRecalcPath <= 0) {
				this.timeToRecalcPath = 10;
				double d0 = this.entity.posX - this.followingEntity.posX;
				double d1 = this.entity.posY - this.followingEntity.posY;
				double d2 = this.entity.posZ - this.followingEntity.posZ;
				double d3 = d0 * d0 + d1 * d1 + d2 * d2;

				if (d3 > (double) (this.stopDistance * this.stopDistance)) {
					this.navigation.tryMoveToEntityLiving(this.followingEntity, this.speedModifier);
				} else {
					this.navigation.clearPath();
					EntityLookHelper entitylookhelper = this.followingEntity.getLookHelper();

					if (d3 <= (double) this.stopDistance || entitylookhelper.getLookPosX() == this.entity.posX
							&& entitylookhelper.getLookPosY() == this.entity.posY
							&& entitylookhelper.getLookPosZ() == this.entity.posZ) {
						double d4 = this.followingEntity.posX - this.entity.posX;
						double d5 = this.followingEntity.posZ - this.entity.posZ;
						this.navigation.tryMoveToXYZ(this.entity.posX - d4, this.entity.posY, this.entity.posZ - d5,
								this.speedModifier);
					}
				}
			}
		}
	}
}
