package com.laz.tirphycraft.world.gen.generators.froz.city;

import java.util.Random;

import com.laz.tirphycraft.init.BlockInit;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.Explosion;
import net.minecraft.world.World;
import net.minecraft.world.chunk.Chunk;
import net.minecraft.world.gen.feature.WorldGenerator;import net.minecraft.world.storage.WorldInfo;

public class WorldGenBuilding extends WorldGenerator {
	public int PROBA;
	public int PROBB;
	public int PROBC;
	
	public WorldGenBuilding(int proba, int probb, int probc) {
		PROBA = proba;
		PROBB = probb;
		PROBC = probc;
	}

	@Override
	public boolean generate(World worldIn, Random rand, BlockPos position) {
		int sizex = rand.nextInt(3);
		int sizey = (rand.nextInt(2) + 1) * 4;
		int sizez = rand.nextInt(3);

		buildWall(worldIn, rand, position, sizex, sizey, sizez);
		buildFloor(worldIn, rand, position, sizex, sizey, sizez);
		for (int i = 0; i < 10; i++) {
			BlockPos p = position.add(rand.nextInt(15 - sizex) + sizex, rand.nextInt(sizey) + 6, rand.nextInt(15-sizez) + sizez);
			destroy(worldIn, rand, p, sizex, sizey, sizez);
		}

		return false;
	}

	public void buildWall(World worldIn, Random rand, BlockPos position, int sizex, int sizey, int sizez) {

		int wm_sizex = (16 - (sizex * 2)) / 4;
		int wm_sizez = (16 - (sizez * 2)) / 4;
		int w_x = 2;// rand.nextInt(2)+2;
		int w_z = 2;// rand.nextInt(2)+2;

		for (int i = sizex; i < 16 - sizex; i++) {
			for (int j = sizez; j < 16 - sizez; j++) {
				for (int k = position.getY() + sizey; k > 0; k--) {
					BlockPos pos = new BlockPos(position.getX() + i, k, position.getZ() + j);
					if (worldIn.getBlockState(pos) == Blocks.GRASS.getDefaultState()) {
						if (rand.nextBoolean())
							placeBlock(worldIn, pos, rand);
					}

				}
			}

		}

		for (int i = sizex; i < 16 - sizex; i++) {
			for (int j = sizez; j < 16 - sizez; j++) {
				for (int k = position.getY() + sizey - rand.nextInt(3); k > 0; k--) {
					BlockPos pos = new BlockPos(position.getX() + i, k, position.getZ() + j);
					if (i == sizex || j == sizez || i == 15 - sizex || j == 15 - sizez) {
						if (rand.nextInt(PROBA) > 1)
							placeBlock(worldIn, pos, rand);
					}
					if (worldIn.getBlockState(pos.down()).getMaterial() == Material.ROCK)
						break;
				}
			}
		}
	}

	public void buildFloor(World worldIn, Random rand, BlockPos position, int sizex, int sizey, int sizez) {

		for (int i = sizex + 1; i < 16 - sizex - 1; i++) {
			for (int j = sizez + 1; j < 16 - sizez - 1; j++) {
				for (int k = -4; k < sizey; k += 4) {
					for (int jj = 1; jj < 3; jj++) {
						worldIn.setBlockToAir(position.add(i, k + jj, j));
					}
					if (rand.nextInt(PROBB) > 1) placeBlock(worldIn, position.add(i, k, j), rand);

				}
			}
		}
	}

	public boolean destroy(World worldIn, Random rand, BlockPos position, int sizex, int sizey, int sizez) {
		Chunk chunk = worldIn.getChunkFromBlockCoords(position);

		int chunkx = chunk.x * 16;
		int chunkz = chunk.z * 16;

		{
			while (true) {
				if (position.getY() > 3) {
					Block block = worldIn.getBlockState(position.down()).getBlock();
				}

				if (position.getY() <= 3) {
					return false;
				}

				int i1 = 5;

				for (int i = 0; i1 >= 0 && i < 3; ++i) {
					int j = i1 + rand.nextInt(2);
					int k = i1 + rand.nextInt(2);
					int l = i1 + rand.nextInt(2);
					float f = (float) (j + k + l) * 0.333F + 0.5F;

					for (BlockPos blockpos : BlockPos.getAllInBox(position.add(-j, -k, -l), position.add(j, k, l))) {
						if (blockpos.distanceSq(position) <= (double) (f * f)) {
							if (blockpos.getX() >= chunkx && blockpos.getX() <= chunkx + 15) {
								if (blockpos.getZ() >= chunkz && blockpos.getZ() <= chunkz + 15) {
									if (worldIn.getBlockState(blockpos).getBlock() == Blocks.STONEBRICK
											|| worldIn.getBlockState(blockpos).getBlock() == BlockInit.FROZ_BLUE_BRICK)
										worldIn.setBlockState(blockpos, Blocks.AIR.getDefaultState());
								}
							}
						}
					}

					position = position.add(-(i1 + 1) + rand.nextInt(2 + i1 * 2), 0 - rand.nextInt(2),
							-(i1 + 1) + rand.nextInt(2 + i1 * 2));
				}

				return true;
			}
		}
	}
	
	public void placeBlock(World worldIn, BlockPos pos, Random rand) {
		IBlockState block;
		if (rand.nextInt(PROBC) == 0) {
			block = Blocks.STONEBRICK.getStateFromMeta(rand.nextInt(4));
		} else {
			block = BlockInit.FROZ_BLUE_BRICK.getStateFromMeta(rand.nextInt(10));
		}
		
		worldIn.setBlockState(pos, block);
	}
}
