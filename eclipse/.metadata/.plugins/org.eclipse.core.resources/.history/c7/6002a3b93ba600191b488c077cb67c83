package com.laz.tirphycraft.world.gen.generators.froz;

import java.util.Random;

import com.laz.tirphycraft.init.BlockInit;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenerator;

public class WorldGenIcePillar extends WorldGenerator {
	public boolean generate(World worldIn, Random rand, BlockPos position) {
		int size = rand.nextInt(5) + 2;

		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				base(worldIn, rand, position.add(i, 0, j));
			}
		}

		return true;
	}

	public void base(World worldIn, Random rand, BlockPos position) {
		int startY = getFloor(worldIn, position, Blocks.GRASS.getDefaultState());
		boolean roof = false;

		for (int i = position.getY(); i > startY; i--) {
			if (!roof) {
				if (worldIn.getBlockState(position.add(0, i - position.getY(), 0)) == Blocks.PACKED_ICE
						.getDefaultState()
						|| worldIn.getBlockState(position.add(0, i - position.getY(), 0)) == Blocks.ICE
								.getDefaultState()
						|| worldIn.getBlockState(position.add(0, i - position.getY(), 0)) == Blocks.OBSIDIAN
								.getDefaultState()) {
					roof = true;
				} else {
					worldIn.setBlockState(position.add(0, i - position.getY(), 0), Blocks.OBSIDIAN.getDefaultState());
					roof = false;
				}
			}
		}

	}

	public int getFloor(World worldIn, BlockPos position, IBlockState block) {
		int startY = 0;
		for (int i = position.getY(); i > 30; i--) {

			if (worldIn.getBlockState(position.add(0, i, 0)) == block) {
				startY = i;
			}
		}
		return startY;
	}

}