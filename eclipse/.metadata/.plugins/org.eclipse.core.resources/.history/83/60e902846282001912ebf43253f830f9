package com.setrion.koratio.proxy;

import org.lwjgl.input.Keyboard;

import com.setrion.koratio.main.Koratio;
import com.setrion.koratio.particles.ParticleGlint;
import com.setrion.koratio.particles.ParticleTypes;
import com.setrion.koratio.render.TESRChargingTable;
import com.setrion.koratio.tileentities.TileEntityChargingTable;

import net.minecraft.client.Minecraft;
import net.minecraft.client.particle.Particle;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.client.settings.KeyBinding;
import net.minecraft.entity.Entity;
import net.minecraft.item.Item;
import net.minecraft.world.World;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.fml.client.FMLClientHandler;
import net.minecraftforge.fml.client.registry.ClientRegistry;

public class ClientProxy extends CommonProxy {
	
	public static final KeyBinding KeySpawnSoul = new KeyBinding("key.spawnsoul", Keyboard.KEY_P, "key.categories.gameplay");
	
	@Override
	public void registerItemRenderer(Item item, int meta, String id) {
		ModelLoader.setCustomModelResourceLocation(item, meta, new ModelResourceLocation(Koratio.modid + ":" + id, "inventory"));
	}
	
    @Override
	public void registerRenderers() {
    	ClientRegistry.bindTileEntitySpecialRenderer(TileEntityChargingTable.class, new TESRChargingTable());
	}
    
    @Override
	public World getClientWorld() {
		return FMLClientHandler.instance().getClient().world;
	}
    
    @Override
	public void spawnParticle(World world, ParticleTypes particleType, double x, double y, double z, double velX, double velY, double velZ) {
		Minecraft mc = Minecraft.getMinecraft();
		Entity entity = mc.getRenderViewEntity();

		// ignore the passed-in world, since on SP we get the integrated server world, which is not really what we want
		world = this.getClientWorld();

		if (entity != null && mc.effectRenderer != null) {
			int i = mc.gameSettings.particleSetting;

			if (i == 1 && world.rand.nextInt(3) == 0) {
				i = 2;
			}

			double d0 = entity.posX - x;
			double d1 = entity.posY - y;
			double d2 = entity.posZ - z;

			if (d0 * d0 + d1 * d1 + d2 * d2 <= 1024D && i <= 1) {
				Particle particle = null;

				switch (particleType) {
					case GLINT:
						particle = new ParticleGlint(world, x, y, z, velX, velY, velZ);
						break;
				}

				if (particle != null) {
					mc.effectRenderer.addEffect(particle);
				}
			}
		}
}
    
}
